{
  "name": "python_prediction_service",
  "endpoints": [
    {
      "modelType": "CLASSIFICATION",
      "inputFolderRef": "RtAZKELv",
      "envSelection": {
        "envMode": "INHERIT"
      },
      "code": "\nfrom  dataiku.apinode.predict.predictor import ClassificationPredictor\nimport pandas as pd\nimport pickle\n\nclass MyPredictor(ClassificationPredictor):\n\n    def __init__(self, data_folder):\n        self.data_folder \u003d data_folder\n\n    def predict(self, features_df):\n\n\n        print \"Features DataFrame %s\" % type(features_df)\n\n        print(\"--------------------\")\n        print(\"--------------------\")\n        print(\"--------------------\")\n        print(type(features_df)\n        print(\"--------------------\")\n        print(\"--------------------\")\n        print(\"--------------------\")\n        \n        \n        \n        folder_path \u003d self.data_folder\n        pkl_filename \u003d folder_path + \"/pickle_model.pkl\"\n        \n        # Load from file\n        with open(pkl_filename, \u0027rb\u0027) as file:\n            pickle_model \u003d pickle.load(file)\n\n        \n        \n        # predictions, one per record (features_df row)\n        #predictions \u003d pd.Series([\"good\", \"fair\", \"poor\", \"good\", \"poor\"])\n        predictions \u003d pd.Series(pickle_model.predict(features_df))\n        \n        # optional probas for each class (may be None or a DataFrame with one column per class)\n        #probas \u003d pd.DataFrame({\n        #    \u0027proba_good\u0027: pd.Series([.9, .6, .2, .7, .2]),\n        #    \u0027proba_fair\u0027: pd.Series([.2, .7, .3, .3, .3]),\n        #    \u0027proba_poor\u0027: pd.Series([.2, .6, .6, .3, .9])\n        #})\n        #probas \u003d \n\n        return (predictions) #, probas\n",
      "testQueries": [
        {
          "q": {
            "features": {
              "PassengerId": 892,
              "Age": 34.5,
              "Siblings - Spouse": 0,
              "Parents - Children": 0,
              "Ticket": "330911",
              "Ticket class": 3,
              "Fare": 7.8292
            }
          }
        }
      ],
      "enrichMapping": [],
      "healthCheckQueries": [],
      "id": "python_prediction_endpoint",
      "type": "CUSTOM_PREDICTION"
    }
  ],
  "publicAccess": true,
  "authRealm": {
    "queryKeys": []
  },
  "tags": [],
  "customFields": {},
  "checklists": {
    "checklists": []
  }
}